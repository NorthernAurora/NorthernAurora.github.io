<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://NorthernAurora.github.io</id>
    <title>Module</title>
    <updated>2020-08-04T04:41:56.241Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://NorthernAurora.github.io"/>
    <link rel="self" href="https://NorthernAurora.github.io/atom.xml"/>
    <subtitle>芝兰生于深林，不以无人而不芳。</subtitle>
    <logo>https://NorthernAurora.github.io/images/avatar.png</logo>
    <icon>https://NorthernAurora.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Module</rights>
    <entry>
        <title type="html"><![CDATA[常用的数学基础推导公式]]></title>
        <id>https://NorthernAurora.github.io/post/chang-yong-de-shu-xue-ji-chu-tui-dao-gong-shi/</id>
        <link href="https://NorthernAurora.github.io/post/chang-yong-de-shu-xue-ji-chu-tui-dao-gong-shi/">
        </link>
        <updated>2020-08-02T10:57:05.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li>知到正方体对角线长度a，设边长为b，则体积V = b^3 = a^3*sqr(3)/9</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[2026 Mars program！]]></title>
        <id>https://NorthernAurora.github.io/post/2026-mars-program/</id>
        <link href="https://NorthernAurora.github.io/post/2026-mars-program/">
        </link>
        <updated>2020-08-02T09:07:13.000Z</updated>
        <content type="html"><![CDATA[<p>参与了NASA的2026名字飞向火星计划。</p>
<ul>
<li>真遥远啊，6年后不出意外的话我已经在充满烟火气的生活里摸爬滚打许久了，所以在这里记录一下，这个在我少年时代末期所参加的事情，希望我的初心不变！嗯，就这样吧。<br>
<img src="https://NorthernAurora.github.io/post-images/1596359539069.png" alt="" loading="lazy"></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[浅谈大数高精（入门向）]]></title>
        <id>https://NorthernAurora.github.io/post/qian-tan-gao-jing-du-ru-men-xiang/</id>
        <link href="https://NorthernAurora.github.io/post/qian-tan-gao-jing-du-ru-men-xiang/">
        </link>
        <updated>2020-07-10T09:03:56.000Z</updated>
        <content type="html"><![CDATA[<h1 style="color:#FF0000;text-align:center">在写了在写了！🤷‍♂<h1>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[请给我翅膀]]></title>
        <id>https://NorthernAurora.github.io/post/qing-gei-wo-chi-bang/</id>
        <link href="https://NorthernAurora.github.io/post/qing-gei-wo-chi-bang/">
        </link>
        <updated>2020-06-28T00:40:16.000Z</updated>
        <content type="html"><![CDATA[<p>现在我许下愿望</p>
<p>若是能实现 那么请给我双翅膀</p>
<p>就像鸟儿一样 在我这背上</p>
<p>帮我带上纯白的翅膀</p>
<p>在这片天空中张开双翼</p>
<p>自在地飞翔啊</p>
<p>不存在悲伤的 自由的天空</p>
<p>拍动着翅膀 随风飞去 🌈<br>
<img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1593189589170&amp;di=04af2e66c15bfcba2a0855b316516684&amp;imgtype=0&amp;src=http%3A%2F%2Fimages.669pic.com%2Felement_pic%2F20%2F92%2F2%2F25%2F0b4be1026458760ef765c1ff18c8902d.jpg%2521w700wb" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[浅谈C语言整型与浮点型转换]]></title>
        <id>https://NorthernAurora.github.io/post/qian-tan-c-yu-yan-zheng-xing-yu-fu-dian-xing-zhuan-huan/</id>
        <link href="https://NorthernAurora.github.io/post/qian-tan-c-yu-yan-zheng-xing-yu-fu-dian-xing-zhuan-huan/">
        </link>
        <updated>2020-06-11T09:48:31.000Z</updated>
        <content type="html"><![CDATA[<p><strong>前言：天才惹人羡慕，可从什么时候开始，愚者的不懈努力也成为大家所嫉妒的东西呢？</strong>（请不要在意，这只是来自愚者的自嘲，呵呵）</p>
<p><strong>本篇博客将阐述、讨论的内容：</strong><img src="https://NorthernAurora.github.io/post-images/1591872642224.png" alt="" loading="lazy"><br>
●<strong>int</strong><br>
      int的范围根据计算机的不同存在16位或32位的差异，以16位举例，最大值为1111 1111 1111 1111，也就是65535，如果出现65536，就会溢出。<br>
     ●<strong>unsigned int(无符号整型)</strong><br>
      以16位系统为例，unsigned int能存储的数据范围是0~65535（需要注意整数是以补码形式存放）。其进行的是模数计算，也就是所谓的二进制相加减，计算方法和十进制加减并无区别，但是unsigned int有着正溢出和负溢出的问题。<br>
      对于正溢出与负溢出，诸多基础概念便不再赘述，不懂的朋友可以去回顾计算机组成原理的相关知识。<br>
<strong>这里仅举出一个负溢出的例子：</strong><img src="https://NorthernAurora.github.io/post-images/1591886105289.png" alt="" loading="lazy"><br>
进行自然丢弃后，可知结果为0。很明显，产生了负溢出。</p>
<p>     ●接下来，我们说说unsigned int和int的相互转化，代码如下：<img src="https://NorthernAurora.github.io/post-images/1591888581238.png" alt="" loading="lazy"><br>
      很显然，计算一个数组所有元素之和。但当数组为空时，length输入0，会返回一个存储器错误。为什么呢？请看unsigned int的计算，length是unsigned int 类型，进行的是模数运算，只代表正数，如果出先了0000000(这里有32个0)-00000..01(31个0，1个1)=111…11111(32个1)=UMAX。一个本该为-1的数变成了无符号数最大值，当i取任何不为0的数都发生了非法访问，自然出现了存储器错误，并且任何数都小于UMAX，出现判别式永远为真，进入死循环。解决办法有两种，做一个判断，当传入length&lt;1,直接返回0 or 在之前就将length转化为int。<br>
●<strong>浮点数</strong><br>
     ●<strong>定点数以及定点数的缺点</strong><br>
      用10进制表示小数早已司空见惯，那么就会想要对二进制做同样的操作，为它也加上小数点。<img src="https://NorthernAurora.github.io/post-images/1591887069630.png" alt="" loading="lazy"><br>
      但是如此的二进制小数，会出现一些问题不可避免</p>
   <table border = "1">
        <tr>
            <th>整数部分</th>
            <th>小数部分</th>
            <th>二进制（Representation）</th>
        </tr>
        <tr>
            <!--td代表一行无加粗-->
            <td>5</td>
            <td>3/4</td>
            <td>101.11<sub>2</sub></td>
        </tr>
        <tr>
            <td>2</td>
            <td>7/8</td>
            <td>10.111<sub>2</sub></td>
        </tr>
        <tr>
            <td>1</td>
            <td>7/16</td>
            <td>1.0111<sub>2</sub></td>
        </tr>
    </table>
&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;很明显可以发现，只能准确的表示x/2<sup>k</sup>的小数，而不为x/2<sup>k</sup>只能近似。
   <table border = "1">
        <tr>
            <th>十进制小数部分</th>
            <th>二进制（Representation）</th>
        </tr>
        <tr>
            <td>1/3</td>
            <td>0.01010101[01]… <sub>2</sub></td>
        </tr>
        <tr>
            <td>1/5</td>
            <td>0.001100110011[0011]… <sub>2</sub></td>
        </tr>
        <tr>
            <td>1/10</td>
            <td>0.0001100110011[0011]… <sub>2</sub></td>
        </tr>
    </table>
<p>      而为什么会出现如上结果，就要知到1/3 和 1/5是如何计算的。<br>
<img src="https://NorthernAurora.github.io/post-images/1591887931595.png" alt="" loading="lazy"><br>
      由此可见，当小数无法描述x/2<sup>k</sup>时，二进制小数便只能取近似值（多采用close to even(靠近偶数)）。<br>
      这就暴露定点数的一个重要缺点 <strong>----</strong> 定点数无法标准化。也就是说，关于小数点的位置无法给出一个标准的定点数计算方式，不同小数点的位置给计算定点数增加了难度。与此同时，定点数表示的范围有限，32位的定点数，假设没有整数位，那么所能表示的小数的最小值为:2<sup>-32</sup>，而32位浮点数仅指数位便可以表示到2<sup>-126</sup>，由此不难看出，定点数虽然精度高，但标准化和范围大小都比较差。<br>
      所以此时便引出了浮点数来统一二进制小数的表示：<br>
<img src="https://NorthernAurora.github.io/post-images/1591888698920.png" alt="" loading="lazy"><br>
注：s:表示符号位，只用一个bit表示<br>
      M:表示尾数（significand)(frac)也表示小数位，即能准确表示小数位<br>
      E:表示指数位。</p>
<p>      下文重点参考了“写代码的柯长”大佬的文章。<br>
<strong>常用的float,double组成：</strong><img src="https://NorthernAurora.github.io/post-images/1591889176923.png" alt="" loading="lazy"><br>
      可以看出float有8位指数位，23位尾数位。指数最大可表示的范围为-127～126<br>
浮点数所表示的一个范围：<img src="https://NorthernAurora.github.io/post-images/1591889257858.png" alt="" loading="lazy"><br>
      有图可以得到，浮点数随着大小的不同被分为不同种类，接近0的称为Denormalized，较大的数字被分为Infinity。（关于Denormalized、Infinity等名词请自行了解，这里不再做过多的赘述）。</p>
<p><strong>Normailized，Denormalized，Infinity,NaN：</strong><img src="https://NorthernAurora.github.io/post-images/1591890225325.png" alt="" loading="lazy"><br>
<strong>Denormalized到NaN的变化：</strong><img src="https://NorthernAurora.github.io/post-images/1591890246544.png" alt="" loading="lazy"></p>
<p><strong>浮点数相加的公式：</strong><img src="https://NorthernAurora.github.io/post-images/1591890618423.png" alt="" loading="lazy"><br>
      浮点数的加法和乘法由于近似的原因，经常无法实现加法的结合律和乘法分配律，如下所示：<br>
(3.14+le10)-1e10=0.0,因为3.14+1e10会舍入，3.14会丢失（1e10表示1<em>101010）<br>
然而3.14+（1e10-1e10）=3.14<br>
le20</em>(le20-le20)=0.0<br>
le20<em>le20-le20</em>le20=NaN，由于溢出的关系，可见在数字大的情况下不满足加法结合律和乘法分配律。</p>
<p><strong>最后，关于int，float，double之间相互转换可能的问题：</strong><br>
      当在int，float以及double格式之间进行强制转换时，程序改变数值和位模式的原则如下（假设int为32位）：<br>
     ●从int转换成float，数字不会溢出，但可能被舍入。<br>
     ●从int或float转换成double，因为double有更大的范围（也就是可表示值得范围），也有更高得精度（即有效位数），所以能保留精确得数值。<br>
     ●从double转换成float，因为范围要小一些，所以值可嫩溢出为+∞或-∞。且由于精度较小，它还可能被舍入。<br>
     ●从float或double转换成int，值将会向0舍入。例如1.999将转换为1。进一步说，值可能会溢出。C语言标准没有对这种情况指定固定的结果。而与Inter兼容的微处理器指定位模式[10…00]（字长为ω时的TMinω）为整数不确定值。一个从浮点数到整数的转换，如果不能为该浮点数找到一个合理的整数近似值，就会产生一个这样的值。因此，表达式（int）+le10会得到-21483648，即从一个正值变成了一个负值。</p>
<p>     文章就到此结束，博主这里刚刚发生了地震，且震感明显，我要下楼避难了（逃🏃‍♀）2020/6/12/00：11：00</p>
<p><strong>参考文献：《深入理解计算机系统（原书第3版）》机械工业出版社<br>
参考博主：写代码的柯长（CSDN）、Jamesjiang2050（博客园）</strong></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[关于在GitHub上传项目的流程]]></title>
        <id>https://NorthernAurora.github.io/post/guan-yu-zai-github-shang-chuan-xiang-mu-de-liu-cheng/</id>
        <link href="https://NorthernAurora.github.io/post/guan-yu-zai-github-shang-chuan-xiang-mu-de-liu-cheng/">
        </link>
        <updated>2020-06-11T05:27:39.000Z</updated>
        <content type="html"><![CDATA[<p><strong>第一步：</strong><br>
完成GitHub注册并创建自己的仓库用于保存项目。并完成任意git的安装。<br>
找到你希望上传的项目文件夹，右键Git Bash Here。<br>
<strong>第二步：</strong><br>
使用git init命令，将项目变为Git可管理的仓库。<br>
<strong>第三步：</strong><br>
使用git add命令，将项目下的文件夹添加到仓库<br>
<strong>第四步：</strong><br>
使用git commit -m命令给项目添加注释<br>
<strong>第五步：</strong><br>
输入git remote add origin+自己在GitHub注册的仓库链接，使得本地仓库关联到GitHub，然后输入git push -u origin master   等待出现提示框输入账号密码，完成上传。</p>
<p>🌈完成上述步骤即可前往GitHub检查项目是否上传完成，若未上传，请检查上传步骤。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Java se实现可局域网联机对战的五子棋]]></title>
        <id>https://NorthernAurora.github.io/post/java-se-shi-xian-ke-ju-yu-wang-lian-ji-dui-zhan-de-wu-zi-qi/</id>
        <link href="https://NorthernAurora.github.io/post/java-se-shi-xian-ke-ju-yu-wang-lian-ji-dui-zhan-de-wu-zi-qi/">
        </link>
        <updated>2020-06-11T04:19:33.000Z</updated>
        <content type="html"><![CDATA[<p><strong>展示如下：</strong><br>
<img src="https://NorthernAurora.github.io/post-images/1591849249396.png" alt="" loading="lazy"><br>
（注：代码有所修改）<br>
未修改代码地址：<a href = "https://github.com/NorthernAurora/MyProject/" target="_black">点击获取</a>⚡️<br>
    其中打印棋盘需要使用的特殊符号打印方式：https://blog.csdn.net/kanpiaoxue/article/details/84915623</p>
<p>    如果想要实现人机对战，可在源代码Geme下加以修改添加打分算法判断即可，打分算法参考链接：https://www.cnblogs.com/chaiwenjun000/p/5321115.html</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[关于Java连接MySql常见报错]]></title>
        <id>https://NorthernAurora.github.io/post/guan-yu-java-lian-jie-mysql-bao-cuo-chu-xian-at-commysqlcjjdbcexceptionssqlerrorcreatesqlexceptionsqlerrorjava11/</id>
        <link href="https://NorthernAurora.github.io/post/guan-yu-java-lian-jie-mysql-bao-cuo-chu-xian-at-commysqlcjjdbcexceptionssqlerrorcreatesqlexceptionsqlerrorjava11/">
        </link>
        <updated>2020-06-06T15:29:15.000Z</updated>
        <content type="html"><![CDATA[<p><strong>IDEA提示</strong><br>
<img src="https://NorthernAurora.github.io/post-images/1591458012503.png" alt="" loading="lazy"><br>
  <strong>解决方法：数据库url中地址要配置“serverTimezone=UTC”</strong><br>
<img src="https://NorthernAurora.github.io/post-images/1591457803241.png" alt="" loading="lazy"><br>
扩展：MySQL jdbc 6.0 版本以上必须配置“serverTimezone”参数<br>
UTC代表的是全球标准时间<br>
若我们使用的时间是北京时区也就是东八区，领先UTC八个小时。url的时区使用中国标准时间。也是就serverTimezone=Asia/Shanghai</p>
<p>** IDEA提示**<br>
<strong>Establishing SSL connection without server's identity verification is not recommende</strong><br>
  <strong>解决方法：数据库url中地址要配置“useSSL=false”</strong><br>
<strong>使用上述标红的URL,即可解决该警告,标红参数前面为你数据库连接URL,如果有多个参数记得用&amp;连接,例如<br>
jdbk:mysql://localhost:3306/testdb?characterEncoding=utf-8&amp;useSSL=false</strong></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[滴水穿石]]></title>
        <id>https://NorthernAurora.github.io/post/di-shui-chuan-shi/</id>
        <link href="https://NorthernAurora.github.io/post/di-shui-chuan-shi/">
        </link>
        <updated>2020-04-30T03:47:07.000Z</updated>
        <content type="html"><![CDATA[<p>  hh，这个贴子现在正式更改为水题打卡训练🤡<a href = "https://www.luogu.com.cn/?_t=1564566493292.2532/" target="_black">洛谷</a><br/></p>
<figure data-type="image" tabindex="1"><img src="https://NorthernAurora.github.io/post-images/1593178660996.png" alt="" loading="lazy"></figure>
<p><strong>2020/7/27更新</strong>🤠<br>
<img src="https://NorthernAurora.github.io/post-images/1595830523861.png" alt="" loading="lazy"><br>
很抱歉，没有鸽，hh，有些人要失望了。</p>
<p><strong>2020/8/4更新</strong>😆<br>
现已新增LeetCode打卡计划，与洛谷双向进行😘</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[浅谈JavaScript 与HTML]]></title>
        <id>https://NorthernAurora.github.io/post/qian-tan-javascript-yu-html/</id>
        <link href="https://NorthernAurora.github.io/post/qian-tan-javascript-yu-html/">
        </link>
        <updated>2020-04-08T01:35:32.000Z</updated>
        <content type="html"><![CDATA[<p>前言：嗯，为什么第一篇文章要写这个呢，因为就在要着手正式开发前没脑子的参加了微信小程序大赛，然而之前并没有写过JS，只好再次把本就+∞的战线再次拉长（笑），再次感受到了时间的紧迫。</p>
<p>什么是JavaScript？<br>
       JavaScript（简称“JS”） 是一种具有函数优先的轻量级，解释型或即时编译型的编程语言。虽然它是作为开发Web页面的脚本语言而出名的，但是它也被用到了很多非浏览器环境中，JavaScript 基于原型编程、多范式的动态脚本语言，并且支持面向对象、命令式和声明式（如函数式编程）风格。</p>
<p>什么是HTML？<br>
        HTML称为超文本标记语言，是一种标识性的语言。它包括一系列标签．通过这些标签可以将网络上的文档格式统一，使分散的Internet资源连接为一个逻辑整体。HTML文本是由HTML命令组成的描述性文本，HTML命令可以说明文字，图形、动画、声音、表格、链接等。</p>
<p>两者的关系：<br>
        HTML和JS都是当前web前端开发所需的技术，js是网页脚本语言，h5是目前最流行的HTML开发语言。而 HTML可以看作是JavaScript，HTML的许多标签都依赖于JS的API实现。</p>
]]></content>
    </entry>
</feed>